---
name: nvchecker
'on':
  push:
    branches:
      - main
  schedule:
    - cron: '0 2 * * *'

jobs:

  nvchecker:
    name: nvchecker
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Pull base image.
        run: docker pull quay.io/aminvakil/archlinux:latest

      - name: Run a container of base image and mount package on it.
        run: |
          container_id=$(mktemp)
          docker run --detach --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro -v "${PWD}":/nvchecker quay.io/aminvakil/archlinux:latest > "${container_id}"
          echo "container_id=$container_id" >> $GITHUB_ENV

      - name: Install nvchecker and git.
        run: docker exec "$(cat ${container_id})" pacman -S nvchecker git --noconfirm

      - name: Nvcheck!
        run: |
          docker exec "$(cat ${container_id})" nvchecker -c /nvchecker/aur.toml
          docker exec "$(cat ${container_id})" nvchecker -c /nvchecker/docker.toml
          aur_nvcmp_output=$(docker exec "$(cat ${container_id})" nvcmp -c /nvchecker/aur.toml)
          docker_nvcmp_output=$(docker exec "$(cat ${container_id})" nvcmp -c /nvchecker/docker.toml)
          if [[ $aur_nvcmp_output ]]; then AUR_HAS_CHANGED='true' ; fi
          if [[ $docker_nvcmp_output ]]; then DOCKER_HAS_CHANGED='true' ; fi
          echo "AUR_HAS_CHANGED=$AUR_HAS_CHANGED" >> $GITHUB_ENV
          echo "DOCKER_HAS_CHANGED=$DOCKER_HAS_CHANGED" >> $GITHUB_ENV
          echo 'aur_nvcmp_output<<EOF' >> $GITHUB_ENV
          echo $aur_nvcmp_output >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo 'docker_nvcmp_output<<EOF' >> $GITHUB_ENV
          echo $docker_nvcmp_output >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          mv aur_new.txt aur_old.txt
          mv docker_new.txt docker_old.txt

      - name: Create AUR Issue.
        id: aur-create-issue
        if: env.AUR_HAS_CHANGED == 'true' && github.event_name != 'pull_request'
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          update_existing: true
          filename: .github/AUR_ISSUE_TEMPLATE.md

      - name: Create Docker Issue.
        id: docker-create-issue
        if: env.DOCKER_HAS_CHANGED == 'true' && github.event_name != 'pull_request'
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          update_existing: true
          filename: .github/DOCKER_ISSUE_TEMPLATE.md

      - name: Create AUR Pull Request
        if: env.AUR_HAS_CHANGED == 'true' && github.event_name != 'pull_request'
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: AUR Bump
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          signoff: false
          branch: aurbump
          delete-branch: true
          title: 'AUR Bump'
          body: Fixes ${{ steps.aur-create-issue.outputs.url }}
          draft: false

      - name: Create Docker Pull Request
        if: env.DOCKER_HAS_CHANGED == 'true' && github.event_name != 'pull_request'
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Docker Bump
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          signoff: false
          branch: dockerbump
          delete-branch: true
          title: 'Docker Bump'
          body: Fixes ${{ steps.docker-create-issue.outputs.url }}
          draft: false

      - name: Stop and remove container forcefully.
        run: docker rm -f "$(cat ${container_id})"
